"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { createSupabaseBrowserClient } from "@/lib/supabase/browser";
import Sidebar from "@/components/Sidebar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { 
  ArrowLeft,
  PanelLeft, 
  Upload,
  Save,
  Trash2
} from "lucide-react";
import { 
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";

interface Project {
  id: string;
  name: string;
  logo_url?: string;
  background_color?: string;
  qr_visibility_duration?: number;
  qr_expires_on_click?: boolean;
}

export default function ProjectSettingsPage() {
  const params = useParams();
  const router = useRouter();
  const projectId = params.id as string;
  
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [supabaseClient, setSupabaseClient] = useState<any>(null);
  const [user, setUser] = useState<any>(null);
  const [projects, setProjects] = useState<any[]>([]);
  const [project, setProject] = useState<Project | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [customizeModalOpen, setCustomizeModalOpen] = useState(false);
  const [colorPickerOpen, setColorPickerOpen] = useState(false);
  const [colorPickerTarget, setColorPickerTarget] = useState<"background" | "font" | null>(null);
  const [tempColor, setTempColor] = useState("#ffffff");

  // Color conversion helpers
  const hexToRgb = (hex: string) => {
    const result = /^#?([a-fd]{2})([a-fd]{2})([a-fd]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : { r: 255, g: 255, b: 255 };
  };

  const rgbToHex = (r: number, g: number, b: number) => {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  };

  const hslToHex = (h: number, s: number, l: number) => {
    l /= 100;
    const a = s * Math.min(l, 1 - l) / 100;
    const f = (n: number) => {
      const k = (n + h / 30) % 12;
      const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return Math.round(255 * color).toString(16).padStart(2, "0");
    };
    return `#${f(0)}${f(8)}${f(4)}`;
  };

  // Form states
  const [name, setName] = useState("");
  const [tempRgb, setTempRgb] = useState({ r: 255, g: 255, b: 255 });
  const [currentHue, setCurrentHue] = useState(0);
  const [clientName, setClientName] = useState("");
  const [logoUrl, setLogoUrl] = useState("");
  const [qrVisibilityDuration, setQrVisibilityDuration] = useState(60);
  const [qrExpiresOnClick, setQrExpiresOnClick] = useState(false);

  // Customization states
  const [logoSize, setLogoSize] = useState(120);
  const [logoPositionY, setLogoPositionY] = useState(-120);
  const [backgroundColor, setBackgroundColor] = useState("#ffffff");
  const [textContent, setTextContent] = useState("");
  const [fontSize, setFontSize] = useState(20);
  const [fontColor, setFontColor] = useState("#ffffff");
  const [textPositionY, setTextPositionY] = useState(-120);

  useEffect(() => {
    async function loadData() {
      const supabase = createSupabaseBrowserClient();
      setSupabaseClient(supabase);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        router.push("/login");
        return;
      }
      setUser(user);

      // Load projects for sidebar
      const { data: projectsData } = await supabase
        .from("projects")
        .select("id, name, logo_url")
        .order("created_at", { ascending: false });
      setProjects(projectsData || []);

      // Load current project
      const { data: projectData } = await supabase
        .from("projects")
        .select("*")
        .eq("id", projectId)
        .eq("owner", user.id)
        .single();

      if (projectData) {
        setProject(projectData);
        setName(projectData.name || "");
        setLogoUrl(projectData.logo_url || "");
        setQrVisibilityDuration(projectData.qr_visibility_duration || 60);
        setQrExpiresOnClick(projectData.qr_expires_on_click || false);
      }
      
      setLoading(false);
    }

    loadData();
  }, [projectId, router]);

  const saveProject = async () => {
    if (!supabaseClient || !project) return;
    
    setSaving(true);
    try {
      const { error } = await supabaseClient
        .from("projects")
        .update({
          name,
          logo_url: logoUrl,
          qr_visibility_duration: qrVisibilityDuration,
          qr_expires_on_click: qrExpiresOnClick
        })
        .eq("id", projectId);

      if (error) throw error;
      
      // Update local state
      setProject(prev => prev ? { ...prev, name, logo_url: logoUrl } : null);
      
      // Show success message briefly
      const button = document.querySelector('[data-save-button]') as HTMLElement;
      if (button) {
        const originalText = button.textContent;
        button.textContent = "Saved!";
        setTimeout(() => {
          button.textContent = originalText;
        }, 2000);
      }
    } catch (error) {
      console.error("Failed to save project:", error);
      alert("Failed to save project settings");
    } finally {
      setSaving(false);
    }
  };

  const deleteProject = async () => {
    if (!supabaseClient || !project) return;
    
    const confirmed = confirm(`Are you sure you want to delete "${project.name}"? This action cannot be undone.`);
    if (!confirmed) return;

    setDeleting(true);
    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: "DELETE"
      });

      if (!response.ok) {
        throw new Error("Failed to delete project");
      }

      router.push("/dashboard");
    } catch (error) {
      console.error("Failed to delete project:", error);
      alert("Failed to delete project");
    } finally {
      setDeleting(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Create a temporary URL for preview
      const fileUrl = URL.createObjectURL(file);
      setLogoUrl(fileUrl);
      
      // TODO: In a real implementation, you'd upload to storage and get a permanent URL
      // For now, we're just showing a preview with the temporary blob URL
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-gray-500">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white flex">
      <Sidebar 
        collapsed={sidebarCollapsed}
        onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}
        user={user}
        projects={projects}
        supabaseClient={supabaseClient}
      />
      
      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-neutral-200 flex-shrink-0">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="lg:hidden"
            >
              <PanelLeft className="w-4 h-4" />
            </Button>
            
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem>
                  <BreadcrumbLink href="/dashboard">Home</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbItem>
                  <BreadcrumbLink href={`/project/${projectId}`}>
                    {project?.name || "Project"}
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbPage>Project settings</BreadcrumbPage>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.back()}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back
          </Button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-auto p-6">
          <div className="w-full max-w-none space-y-8">
            {/* Page Title */}
            <div className="flex items-center justify-between">
              <h1 className="text-2xl font-semibold text-neutral-950">Project settings</h1>
              <Button 
                variant="outline"
                onClick={() => setCustomizeModalOpen(true)}
              >
                Customize public page
              </Button>
            </div>

            {/* Project Information */}
            <Card>
              <CardContent className="p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <h3 className="text-lg font-medium text-neutral-950 mb-2">Project information</h3>
                    <p className="text-sm text-neutral-600">View and update your personal details and account information.</p>
                  </div>
                  
                  <div className="space-y-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-neutral-950">Project name</label>
                      <Input
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        placeholder="Project name"
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-neutral-950">Client</label>
                      <Input
                        value={clientName}
                        onChange={(e) => setClientName(e.target.value)}
                        placeholder="Client name"
                        className="w-full"
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Logo */}
            <Card>
              <CardContent className="p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div className="flex flex-col">
                    <div>
                      <h3 className="text-lg font-medium text-neutral-950 mb-2">Logo</h3>
                      <p className="text-sm text-neutral-600 mb-4">Logo will be displayed on the public page</p>
                    </div>
                    
                    {/* Logo Preview - aligned to bottom */}
                    <div className="flex-1 flex items-end">
                      <div className="w-full border border-neutral-200 rounded-lg p-4 bg-neutral-50 flex items-center justify-center h-32">
                        {logoUrl ? (
                          <img
                            src={logoUrl}
                            alt="Logo preview"
                            className="max-w-full max-h-full object-contain"
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.style.display = 'none';
                              const parent = target.parentElement;
                              if (parent) {
                                parent.innerHTML = '<div class="text-sm text-red-500">Failed to load image</div>';
                              }
                            }}
                          />
                        ) : (
                          <div className="text-sm text-neutral-400">No logo uploaded</div>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-neutral-950">Logo URL</label>
                      <Input
                        value={logoUrl}
                        onChange={(e) => setLogoUrl(e.target.value)}
                        placeholder="Logo URL"
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-neutral-950">Upload Logo</label>
                      <div className="border-2 border-dashed border-neutral-300 rounded-lg p-8 text-center hover:border-neutral-400 transition-colors cursor-pointer h-32 flex flex-col items-center justify-center">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleFileUpload}
                          className="hidden"
                          id="logo-upload"
                        />
                        <label htmlFor="logo-upload" className="cursor-pointer">
                          <Upload className="w-8 h-8 mx-auto mb-3 text-neutral-400" />
                          <p className="text-sm text-neutral-600">
                            <span className="text-blue-600 hover:text-blue-700">Drag and drop</span> or{" "}
                            <span className="text-blue-600 hover:text-blue-700">choose a file</span>
                          </p>
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>


            {/* QR Code Duration */}
            <Card>
              <CardContent className="p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <h3 className="text-lg font-medium text-neutral-950 mb-2">QR code duration</h3>
                    <p className="text-sm text-neutral-600">How long the QR code stays visible after a new image is uploaded</p>
                  </div>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <label className="text-sm font-medium text-neutral-950">
                        Duration: {qrVisibilityDuration === 0 ? 'Never expires' : `${qrVisibilityDuration} seconds`}
                      </label>
                      <div className="flex items-center gap-2">
                        <Switch
                          checked={qrExpiresOnClick}
                          onCheckedChange={setQrExpiresOnClick}
                        />
                        <span className="text-sm text-neutral-600">Code expires after first view</span>
                      </div>
                    </div>
                    <Slider
                      value={[qrVisibilityDuration]}
                      onValueChange={(value) => setQrVisibilityDuration(value[0])}
                      max={300}
                      min={0}
                      step={10}
                      className="w-full"
                    />
                    <div className="flex items-center justify-between text-xs text-neutral-500">
                      <span>Never expires</span>
                      <span>5 minutes</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="flex items-center justify-between pt-6 border-t border-neutral-200">
              <Button
                variant="destructive"
                onClick={deleteProject}
                disabled={deleting}
                className="flex items-center gap-2"
              >
                <Trash2 className="w-4 h-4" />
                {deleting ? "Deleting..." : "Delete Project"}
              </Button>
              
              <Button
                onClick={saveProject}
                disabled={saving}
                data-save-button
                className="flex items-center gap-2"
              >
                <Save className="w-4 h-4" />
                {saving ? "Saving..." : "Save Changes"}
              </Button>
            </div>
          </div>
        </div>

        {/* Customize Public Page Modal */}
        <Dialog open={customizeModalOpen} onOpenChange={setCustomizeModalOpen}>
          <DialogContent className="!max-w-none !w-[85vh] !h-[85vh] flex flex-col p-0 gap-0 !aspect-square" style={{ width: "85vh !important", height: "85vh !important", maxWidth: "85vh !important", maxHeight: "85vh !important", aspectRatio: "1 / 1 !important" }}>
            <DialogHeader className="flex-shrink-0 p-6 pb-0">
              <DialogTitle>Customize your public page</DialogTitle>
              <p className="text-sm text-neutral-600">Customize how your public page looks like to visitors.</p>
            </DialogHeader>
            
            <div className="flex-1 grid grid-cols-1 lg:grid-cols-5 gap-0 overflow-hidden">
              {/* Controls Panel */}
              <div className="lg:col-span-2 space-y-6 overflow-y-auto p-6 bg-white border-r border-neutral-200">
                {/* Logo Size */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">
                    Logo size: {logoSize}px
                  </label>
                  <Slider
                    value={[logoSize]}
                    onValueChange={(value) => setLogoSize(value[0])}
                    max={200}
                    min={50}
                    step={10}
                    className="w-full"
                  />
                </div>

                {/* Logo Position Y */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">
                    Logo position Y: {logoPositionY}px
                  </label>
                  <Slider
                    value={[logoPositionY]}
                    onValueChange={(value) => setLogoPositionY(value[0])}
                    max={200}
                    min={-200}
                    step={10}
                    className="w-full"
                  />
                </div>

                {/* Background Color */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">Background color:</label>
                  <div className="flex items-center gap-3">
                    <Input
                      value={backgroundColor}
                      onChange={(e) => setBackgroundColor(e.target.value)}
                      placeholder="#ffffff"
                      className="flex-1"
                    />
                    <div 
                      className="w-12 h-10 rounded border border-neutral-300 cursor-pointer"
                      style={{ backgroundColor }}
                      onClick={() => {
                        setTempColor(backgroundColor);
                        setColorPickerTarget("background");
                        setColorPickerOpen(true);
                      }}
                    />
                  </div>
                </div>

                {/* Text Content */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">Text content:</label>
                  <Textarea
                    value={textContent}
                    onChange={(e) => setTextContent(e.target.value)}
                    placeholder="Your text here"
                    rows={3}
                  />
                </div>

                {/* Font Size */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">
                    Font size: {fontSize}px
                  </label>
                  <Slider
                    value={[fontSize]}
                    onValueChange={(value) => setFontSize(value[0])}
                    max={50}
                    min={10}
                    step={2}
                    className="w-full"
                  />
                </div>

                {/* Font Color */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">Font color:</label>
                  <div className="flex items-center gap-3">
                    <Input
                      value={fontColor}
                      onChange={(e) => setFontColor(e.target.value)}
                      placeholder="#ffffff"
                      className="flex-1"
                    />
                    <div 
                      className="w-12 h-10 rounded border border-neutral-300 cursor-pointer"
                      style={{ backgroundColor: fontColor }}
                      onClick={() => {
                        const rgb = hexToRgb(fontColor);
                        setTempColor(fontColor);
                        setTempRgb(rgb);
                        setColorPickerTarget("font");
                        setColorPickerOpen(true);
                      }}
                    />
                  </div>
                </div>

                {/* Text Position Y */}
                <div className="space-y-4">
                  <label className="text-sm font-medium text-neutral-950">Text position Y: {textPositionY}px</label>
                  <Slider
                    value={[textPositionY]}
                    onValueChange={(value) => setTextPositionY(value[0])}
                    max={200}
                    min={-200}
                    step={10}
                    className="w-full"
                  />
                </div>
              </div>

              {/* Preview Panel */}
              <div className="lg:col-span-3 flex flex-col bg-neutral-50 p-4">
                <div className="flex-1 flex items-center justify-center">
                  <div className="w-full max-w-sm mx-auto">
                    <div 
                      className="w-full border border-neutral-300 rounded-2xl overflow-hidden relative flex items-center justify-center shadow-lg"
                      style={{ 
                        backgroundColor,
                        aspectRatio: '9/16',
                        minHeight: "400px"
                      }}
                    >
                    {/* Logo Preview */}
                    {logoUrl && (
                      <img
                        src={logoUrl}
                        alt="Logo preview"
                        className="absolute object-contain"
                        style={{
                          width: `${logoSize}px`,
                          height: `${logoSize}px`,
                          transform: `translateY(${logoPositionY}px)`
                        }}
                      />
                    )}
                    
                    {/* Text Preview */}
                    {textContent && (
                      <div
                        className="absolute text-center"
                        style={{
                          fontSize: `${fontSize}px`,
                          color: fontColor,
                          transform: `translateY(${textPositionY}px)`
                        }}
                      >
                        {textContent}
                      </div>
                    )}
                    
                    {/* Placeholder if no content */}
                    {!logoUrl && !textContent && (
                      <div className="text-neutral-400 text-center">
                        <p>Preview will appear here</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Modal Actions */}
              <div className="flex justify-end gap-3 p-6 border-t border-neutral-200">
                <Button
                  variant="outline"
                  onClick={() => setCustomizeModalOpen(false)}
                >
                  Cancel
                </Button>
                <Button
                  onClick={() => {
                    // TODO: Save customization settings
                    setCustomizeModalOpen(false);
                  }}
                  className="bg-neutral-900 hover:bg-neutral-800 text-white"
                >
                  Save
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Color Picker Modal */}
        <Dialog open={colorPickerOpen} onOpenChange={setColorPickerOpen}>
          <DialogContent className="max-w-md bg-neutral-800 border-neutral-700">
            <DialogHeader>
              <DialogTitle className="text-white">Choose color</DialogTitle>
            </DialogHeader>
            <div className="p-6">
              {/* Color Gradient Area */}
              <div className="relative w-full h-48 mb-4 rounded-lg overflow-hidden">
                <div 
                  className="w-full h-full cursor-crosshair"
                  style={{
                    background: `linear-gradient(to bottom, transparent, black), linear-gradient(to right, white, ${hslToHex(currentHue, 100, 50)})`,
                  }}
                  onClick={(e) => {
                    const rect = e.currentTarget.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    const saturation = Math.round((x / rect.width) * 100);
                    const lightness = Math.round(100 - (y / rect.height) * 100);
                    const newColor = hslToHex(currentHue, saturation, lightness);
                    const rgb = hexToRgb(newColor);
                    setTempColor(newColor);
                    setTempRgb(rgb);
                  }}
                />
              </div>

              {/* Hue Slider */}
              <div className="mb-4">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 rounded-full border-2 border-white cursor-pointer" style={{ backgroundColor: tempColor }} />
                  <div className="flex-1 h-6 rounded-full cursor-pointer" 
                    style={{
                      background: "linear-gradient(to right, #ff0000, #ff8000, #ffff00, #80ff00, #00ff00, #00ff80, #00ffff, #0080ff, #0000ff, #8000ff, #ff00ff, #ff0080, #ff0000)"
                    }}
                    onClick={(e) => {
                      const rect = e.currentTarget.getBoundingClientRect();
                      const x = e.clientX - rect.left;
                      const hue = Math.round((x / rect.width) * 360);
                      setCurrentHue(hue);
                      const newColor = hslToHex(hue, 100, 50);
                      const rgb = hexToRgb(newColor);
                      setTempColor(newColor);
                      setTempRgb(rgb);
                    }}
                  />
                </div>
              </div>

              {/* RGB Input Fields */}
              <div className="grid grid-cols-3 gap-3 mb-6">
                <div className="text-center">
                  <input 
                    type="number" 
                    min="0" 
                    max="255" 
                    value={tempRgb.r}
                    onChange={(e) => {
                      const newR = parseInt(e.target.value) || 0;
                      const newRgb = { ...tempRgb, r: newR };
                      setTempRgb(newRgb);
                      setTempColor(rgbToHex(newRgb.r, newRgb.g, newRgb.b));
                    }}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded text-white text-center"
                  />
                  <label className="text-sm text-neutral-300 mt-1 block">R</label>
                </div>
                <div className="text-center">
                  <input 
                    type="number" 
                    min="0" 
                    max="255" 
                    value={tempRgb.g}
                    onChange={(e) => {
                      const newG = parseInt(e.target.value) || 0;
                      const newRgb = { ...tempRgb, g: newG };
                      setTempRgb(newRgb);
                      setTempColor(rgbToHex(newRgb.r, newRgb.g, newRgb.b));
                    }}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded text-white text-center"
                  />
                  <label className="text-sm text-neutral-300 mt-1 block">G</label>
                </div>
                <div className="text-center">
                  <input 
                    type="number" 
                    min="0" 
                    max="255" 
                    value={tempRgb.b}
                    onChange={(e) => {
                      const newB = parseInt(e.target.value) || 0;
                      const newRgb = { ...tempRgb, b: newB };
                      setTempRgb(newRgb);
                      setTempColor(rgbToHex(newRgb.r, newRgb.g, newRgb.b));
                    }}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded text-white text-center"
                  />
                  <label className="text-sm text-neutral-300 mt-1 block">B</label>
                </div>
                <div className="flex items-center justify-center">
                  <svg className="w-5 h-5 text-neutral-400" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.828-2.828z" />
                  </svg>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end gap-3">
                <Button
                  variant="outline"
                  onClick={() => setColorPickerOpen(false)}
                  className="border-neutral-600 text-neutral-300 hover:bg-neutral-700"
                >
                  Cancel
                </Button>
                <Button
                  onClick={() => {
                    if (colorPickerTarget === "background") {
                      setBackgroundColor(tempColor);
                    } else if (colorPickerTarget === "font") {
                      setFontColor(tempColor);
                    }
                    setColorPickerOpen(false);
                  }}
                  className="bg-neutral-900 hover:bg-neutral-800 text-white"
                >
                  Apply
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
